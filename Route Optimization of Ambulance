#------------------------------------------------------Route optimization for ambulance------------------------------------------------------
<!DOCTYPE html>
<html>
<head>
  <title>Nearest Hospital Finder with GPS</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <style>
    #map { height: 500px; width: 100%; margin-top: 10px; }
    body { font-family: Arial; margin: 20px; }
    button { padding: 8px 16px; margin-bottom: 10px; cursor: pointer; }
  </style>
</head>
<body>

<h2>üöë Select or Use GPS for Accident Location</h2>
<select id="locationDropdown">
  <option value="13.0736,80.2156">Anna Nagar</option>
  <option value="13.0827,80.2707">Chennai Central</option>
  <option value="13.1436,79.9086">Thiruvallur</option>
  <option value="12.7110,80.0034">Singa Perumal Koil</option>
</select>
<button onclick="useMyLocation()">üìç Use My GPS Location</button>

<div id="map"></div>
<p id="result"></p>

<script>
  const hospitals = [
    { name: "Apollo Hospital", lat: 13.0604, lon: 80.2496 },
    { name: "MIOT Hospital", lat: 13.0108, lon: 80.2044 },
    { name: "KMC Hospital", lat: 13.0865, lon: 80.2820 },
    { name: "Sundaram Medical", lat: 13.0765, lon: 80.1975 },
    { name: "Thiruvallur GH", lat: 13.1436, lon: 79.9086 }
  ];

  let map = L.map('map').setView([13.0736, 80.2156], 12);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Map data ¬© OpenStreetMap contributors'
  }).addTo(map);

  let accidentMarker, hospitalLine;

  function haversine(lat1, lon1, lat2, lon2) {
    const R = 6371;
    const toRad = x => x * Math.PI / 180;
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat / 2) ** 2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;
    return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  }

  function updateMap(lat, lon) {
    if (accidentMarker) map.removeLayer(accidentMarker);
    if (hospitalLine) map.removeLayer(hospitalLine);

    map.setView([lat, lon], 13);

    // Accident location marker
    accidentMarker = L.marker([lat, lon]).addTo(map).bindPopup("üö® Ambulance Location").openPopup();

    // Add hospital markers
    hospitals.forEach(h => {
      L.marker([h.lat, h.lon]).addTo(map).bindPopup(`üè• ${h.name}`);
    });

    // Find nearest hospital
    let nearest = null;
    let minDist = Infinity;
    for (const h of hospitals) {
      const d = haversine(lat, lon, h.lat, h.lon);
      if (d < minDist) {
        minDist = d;
        nearest = h;
      }
    }

    // Draw red line
    hospitalLine = L.polyline([[lat, lon], [nearest.lat, nearest.lon]], {
      color: 'red', weight: 4
    }).addTo(map);

    document.getElementById("result").innerHTML = `
      ‚úÖ Nearest Hospital: <b>${nearest.name}</b><br>
      üìç Distance: <b>${minDist.toFixed(2)} km</b>
    `;
  }

  // Event: Dropdown change
  document.getElementById("locationDropdown").addEventListener("change", function () {
    const [lat, lon] = this.value.split(',').map(Number);
    updateMap(lat, lon);
  });

  // GPS Function
  function useMyLocation() {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(position => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        updateMap(lat, lon);
      }, () => {
        alert("‚ö†Ô∏è Unable to fetch location. Please allow GPS access.");
      });
    } else {
      alert("Geolocation is not supported by your browser.");
    }
  }

  // First load with default location
  updateMap(13.0736, 80.2156);
</script>

</body>
</html>
