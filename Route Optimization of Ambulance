#------------------------------------------------------Route optimization for ambulance------------------------------------------------------
import pandas as pd
import numpy as np

# Create a sample dataset for AI ambulance
data = {
    'Ambulance_ID': [f'AMB{i:03d}' for i in range(1, 11)],
    'Current_Location_Lat': np.random.uniform(12.9, 13.1, 10),
    'Current_Location_Lon': np.random.uniform(80.2, 80.3, 10),
    'Destination_Lat': np.random.uniform(12.9, 13.1, 10),
    'Destination_Lon': np.random.uniform(80.2, 80.3, 10),
    'Traffic_Level': np.random.choice(['Low', 'Medium', 'High'], 10),
    'Road_Blockage': np.random.randint(0, 2, 10),
    'ETA_Minutes': np.random.randint(5, 30, 10),
    'Emergency_Level': np.random.choice(['Stable', 'Moderate', 'Critical'], 10),
    'Patient_Condition': np.random.choice(['Fracture', 'Cardiac Arrest', 'Pregnant'], 10),
    'Ambulance_Type': np.random.choice(['ALS', 'BLS'], 10),
    'Driver_Fatigue_Score': np.random.uniform(0, 1, 10),
}

df = pd.DataFrame(data)
display(df)




# Add a new entry
for i in range(5):
  new_entry = {
      'Ambulance_ID': f'AMB{11 + i:03d}',
      'Current_Location_Lat': np.random.uniform(12.9, 13.1),
      'Current_Location_Lon': np.random.uniform(80.2, 80.3),
      'Destination_Lat': np.random.uniform(12.9, 13.1),
      'Destination_Lon': np.random.uniform(80.2, 80.3),
      'Traffic_Level': np.random.choice(['Low', 'Medium', 'High']),
      'Road_Blockage': np.random.randint(0, 2),
      'ETA_Minutes': np.random.randint(5, 30),
      'Emergency_Level': np.random.choice(['Stable', 'Moderate', 'Critical']),
      'Patient_Condition': np.random.choice(['Fracture', 'Cardiac Arrest', 'Pregnant']),
      'Ambulance_Type': np.random.choice(['ALS', 'BLS']),
      'Driver_Fatigue_Score': np.random.uniform(0, 1),
  }

  df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)

display(df)



hospital_data = {
    'Hospital_ID': [f'HOSP{i}' for i in range(1, 4)],
    'Hospital_Lat': np.random.uniform(12.9, 13.1, 3),
    'Hospital_Lon': np.random.uniform(80.2, 80.3, 3),
}

hospitals_df = pd.DataFrame(hospital_data)
display(hospitals_df)

import folium

# Calculate the mean latitude and longitude for centering the map
center_lat = pd.concat([df['Current_Location_Lat'], hospitals_df['Hospital_Lat']]).mean()
center_lon = pd.concat([df['Current_Location_Lon'], hospitals_df['Hospital_Lon']]).mean()

# Create a base map
m = folium.Map(location=[center_lat, center_lon], zoom_start=12)

# Add markers for hospitals
for index, hospital in hospitals_df.iterrows():
    folium.Marker(
        location=[hospital['Hospital_Lat'], hospital['Hospital_Lon']],
        popup=hospital['Hospital_ID'],
        icon=folium.Icon(color='red', icon='hospital')
    ).add_to(m)

# Add markers for ambulances and draw lines to the nearest hospital
for index, ambulance in df.iterrows():
    folium.Marker(
        location=[ambulance['Current_Location_Lat'], ambulance['Current_Location_Lon']],
        popup=ambulance['Ambulance_ID'],
        icon=folium.Icon(color='blue', icon='ambulance')
    ).add_to(m)

    # Get the nearest hospital information from distances_df
    nearest_hospital_id = distances_df.loc[index, 'Nearest_Hospital']
    nearest_hospital = hospitals_df[hospitals_df['Hospital_ID'] == nearest_hospital_id].iloc[0]

    # Draw a line from the ambulance to the nearest hospital
    folium.PolyLine(
        locations=[
            (ambulance['Current_Location_Lat'], ambulance['Current_Location_Lon']),
            (nearest_hospital['Hospital_Lat'], nearest_hospital['Hospital_Lon'])
        ],
        color='green',
        weight=2.5,
        opacity=1
    ).add_to(m)

# Display the map
display(m)

for index, row in distances_df.iterrows():
    ambulance_id = row['Ambulance_ID']
    nearest_hospital = row['Nearest_Hospital']
    nearest_distance = row['Nearest_Distance']
    print(f"Ambulance {ambulance_id} is nearest to {nearest_hospital} at a distance of {nearest_distance:.2f} km.")
